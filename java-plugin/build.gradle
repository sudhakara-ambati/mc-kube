plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

group = 'com.mckube'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = 'velocity'
        url = 'https://nexus.velocitypowered.com/repository/maven-public/'
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.4.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.4.0-SNAPSHOT"

    implementation 'io.javalin:javalin:6.1.3'
    implementation 'org.mongodb:mongodb-driver-sync:4.11.1'
    implementation platform("com.fasterxml.jackson:jackson-bom:2.12.4")
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation 'com.google.code.gson:gson:2.11.0'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

def serverPluginsDir = project.findProperty('serverDir') ?: 'Y:/velocity serve test/plugins/'

task fatJar(type: Jar) {
    archiveBaseName.set(project.name)
    archiveClassifier.set('')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from sourceSets.main.output
    
    from {
        configurations.runtimeClasspath.findAll { 
            !it.name.contains('velocity-api') 
        }.collect { 
            it.isDirectory() ? it : zipTree(it).matching {
                exclude 'META-INF/*.SF'
                exclude 'META-INF/*.DSA'
                exclude 'META-INF/*.RSA'
                exclude 'META-INF/MANIFEST.MF'
                exclude 'META-INF/INDEX.LIST'
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/NOTICE*'
                exclude 'META-INF/LICENSE*'
                exclude 'META-INF/versions/**'
                exclude 'module-info.class'
            }
        }
    }
}

build {
    dependsOn fatJar
}

jar {
    enabled = false
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)